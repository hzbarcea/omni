<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2013 The Fictitious OMNI Corporation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:jaxrs="http://cxf.apache.org/jaxrs"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
      http://cxf.apache.org/transports/jms http://cxf.apache.org/schemas/configuration/jms.xsd
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
      http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
      http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

  <import resource="classpath:META-INF/cxf/cxf.xml" />
  <import resource="classpath:META-INF/cxf/camel/cxf-extension-camel.xml" />

  <jaxrs:server id="omni-server" address="camel://direct:osiris">
    <jaxrs:serviceBeans>
      <ref bean="osiris" />
    </jaxrs:serviceBeans>
    <jaxrs:providers>
      <ref bean="jsonProvider"/>
    </jaxrs:providers>
  </jaxrs:server>
  <jaxrs:server id="club-server" address="camel://direct:club">
    <jaxrs:serviceBeans>
      <ref bean="club" />
    </jaxrs:serviceBeans>
  </jaxrs:server>

  <bean id="osiris-library" class="org.talend.example.omni.core.OsirisLibrary" />
  <bean id="osiris" class="org.talend.example.omni.service.OsirisService">
    <property name="library" ref="osiris-library" />
  </bean>
  <bean id="club" class="org.talend.example.omni.service.ClubManagerService" />
  <bean id="qcAaggregator" class="org.talend.example.omni.service.AssetQCAggregator"/>
  <bean id="omni-manager" class="org.talend.example.omni.service.OmniManagedService"/>

  <bean id="jsonProvider" class="org.apache.cxf.jaxrs.provider.json.JSONProvider">
      <property name="ignoreNamespaces" value="true" />
      <property name="dropCollectionWrapperElement" value="true" />
      <property name="marshallAsJaxbElement" value="true" />
      <property name="serializeAsArray" value="true" />
  </bean>


  <camelContext id="omni" xmlns="http://camel.apache.org/schema/spring">

    <!--  This route offers the cxf endpoint using an embedded jetty instance -->
    <route id="osiris-service">
      <from uri="jetty:http://0.0.0.0:9099/Adoniss.RESTServices/?matchOnUriPrefix=true" />
      <!-- Can do extra processing here -->
      <to uri="direct:osiris" />
    </route>
    <route id="club-manager">
      <from uri="jetty:http://0.0.0.0:9099/omni/?matchOnUriPrefix=true" />
      <!-- Can do extra processing here -->
      <to uri="direct:club" />
    </route>
    <route>
      <from uri="direct:club-service"/>
      <to uri="xmlrpc:http://localhost:8080/Baton?synchronous=true&amp;basicUserName=user&amp;basicPassword=user" />
      <convertBodyTo type="java.lang.String" />
      <to uri="log:club" />
    </route>


    <!-- Continuous polling tasks (BPM) -->
    <route id="poll-tasks" autoStartup="false">
      <from uri="timer://omni/osiris?fixedRate=true&amp;period=60000" />
      <setBody><constant>poll-tasks TRIGGERED</constant></setBody>
      <to uri="log:org.talend.example.omni.TASKS" />
      <pollEnrich uri="http://localhost:9099/Adoniss.RESTServices/AdonissRESTService/GetAutoQCAssets/1,2,4,8/0?_type=xml" />
      <unmarshal><jaxb prettyPrint="false" contextPath="org.talend.example.omni.types" /></unmarshal>
      <split>
        <simple>${body.getAutoQCAssetsResults}</simple>
        <setHeader headerName="mediaKey"><simple>${body.mediaLocation}</simple></setHeader>
        <aggregate strategyRef="qcAaggregator" completionTimeout="1000">
          <correlationExpression>
            <simple>header.mediaKey</simple>
          </correlationExpression>
          <to uri="direct:manage-tasks" />
        </aggregate>
      </split>
      <!-- to uri="log:osiris" / -->
    </route>

    <route id="manage-tasks">
      <from uri="direct:manage-tasks" />
      <filter>
        <method ref="omni-manager" method="newTask" />
        <to uri="bean:omni-manager?method=trackTask" />
        <setBody><simple>${header.mediaKey}</simple></setBody>
        <to uri="direct:start-bp" />
        <to uri="bean:omni-manager?method=scheduleTask" />
      </filter>
    </route>

    <route id="bp-start">
      <from uri="direct:start-bp" />
      <setHeader headerName="bpStart"><constant>direct:trigger-bp</constant></setHeader>
      <setHeader headerName="bpTrigger"><constant>direct:trigger-bp</constant></setHeader>
    </route>
    <route id="bp-trigger">
      <from uri="direct:trigger-bp" />
      <to uri="log:org.talend.example.omni.TriggerBPM" />
      <!-- TODO: correlation with the qc_items and update status in adoniss -->
    </route>
    <route id="club-status">
      <from uri="direct:club-check-status" />
      <filter>
        <!-- TODO: simulate completion with a completely random expression -->
        <method ref="omni-manager" method="random" />
        <setHeader headerName='status'><constant>Complete</constant></setHeader>
        <!-- TODO: correlation with the qc_items and update status in Adoniss -->
      </filter>
    </route>


    <!-- Poll for completed tasks -->
    <route id="poll-complete" autoStartup="false">
      <from uri="timer://omni/club?fixedRate=true&amp;period=90000" />
      <setBody><constant>poll-complete TRIGGERED</constant></setBody>
      <to uri="log:org.talend.example.omni.COMPLETE" />
      <to uri="bean:omni-manager?method=monitorScheduledTasks" />
      <split>
        <simple>${body}</simple>
        <to uri="direct:club-check-status" />
        <choice>
          <when>
            <simple>${header.status} == 'Complete'</simple>
            <to uri="bean:omni-manager?method=completeTask" />
            <!-- now we got the complete task (Map<String, Object), invoke back on BPM -->
            <recipientList><simple>${body['bpTrigger']}</simple></recipientList>
          </when>
          <when>
            <simple>${header.status} == 'Aborted'</simple>
            <to uri="log:org.talend.example.omni.ABORTED" />
            <!-- ... or call on the BPM... -->
          </when>
          <otherwise>
            <!-- do nothing, wait for completion; could log, but... nah -->
          </otherwise>
        </choice>
      </split>
    </route>


    <!-- Provisioning of the mock osiris service -->
    <route id="osiris-assets" autoStartup="false">
      <from uri="file:/x1/omni/assets" />
      <unmarshal><csv delimiter="|" skipFirstLine="true" /></unmarshal>
      <split>
        <simple>${body}</simple>
        <convertBodyTo type="org.talend.example.omni.core.Asset" />
        <to uri="log:org.talend.example.omni" />
        <to uri="bean:osiris-library?method=addAsset"/>
      </split>
    </route>
    <route id="osiris-metadata" autoStartup="false">
      <from uri="file:/x1/omni/metadata" />
      <unmarshal><csv delimiter="," skipFirstLine="true" /></unmarshal>
      <split>
        <simple>${body}</simple>
        <convertBodyTo type="org.talend.example.omni.core.AssetMetadata" />
        <to uri="log:org.talend.example.omni" />
        <to uri="bean:osiris-library?method=addAssetMetadata"/>
      </split>
    </route>
    <route id="osiris-qcitems" autoStartup="false">
      <from uri="file:/x1/omni/qcitems" />
      <unmarshal><csv delimiter="," skipFirstLine="true" /></unmarshal>
      <split>
        <simple>${body}</simple>
        <convertBodyTo type="org.talend.example.omni.core.AssetQcItem" />
        <to uri="log:org.talend.example.omni" />
        <to uri="bean:osiris-library?method=addQcItem"/>
      </split>
    </route>

  </camelContext>

</beans>
